import { useEffect, useState } from 'react';
import style from 'App.module.css';
import Display from 'Components/Display/Display';
import Panel from 'Components/Panel/Panel';

function App() {
  const [value, setValue] = useState(0);
  const [result, setResult] = useState(0);
  const [memory, setMemory] = useState(0);
  const [operator, setOperator] = useState(false);

  useEffect(() => {
    const calc = function (dataByCalc) {
      console.log(
        'üöÄ ~ file: App.jsx ~ line 15 ~ calc ~ dataByCalc',
        dataByCalc,
      );
      if (typeof dataByCalc === 'number') {
        // ? –µ—Å–ª–∏ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –ø—Ä–µ–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        dataByCalc = dataByCalc.toString();
      }
      let elements = dataByCalc.split(' ');

      const pastResult = (start, num, count = 3) => {
        elements.splice(start, count, num);
      };
      const multiply = index => {
        const result = (
          Number(elements[index - 1]) * Number(elements[index + 1])
        ).toFixed(10);
        pastResult(index - 1, result);
      };
      const divided = index => {
        const result = (
          Number(elements[index - 1]) / Number(elements[index + 1])
        ).toFixed(10);
        pastResult(index - 1, result);
      };
      const plus = index => {
        const result = (
          Number(elements[index - 1]) + Number(elements[index + 1])
        ).toFixed(10);
        pastResult(index - 1, result);
      };
      const minus = index => {
        const result = (
          Number(elements[index - 1]) - Number(elements[index + 1])
        ).toFixed(10);
        pastResult(index - 1, result);
      };

      if (!elements) {
        return;
      }
      // ? —Å–Ω–∞—á–∞–ª–∞ –∏–¥—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è –∏ —É–º–Ω–æ–∂–µ–Ω–∏—è
      if (elements.indexOf('*') !== -1 && elements.indexOf('/') !== -1) {
        // ? –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–º–æ—Ç—Ä–∏–º –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
        if (elements.indexOf('/') < elements.indexOf('*')) {
          divided(elements.indexOf('/'));
          return calc(elements.join(' '));
        }
        if (elements.indexOf('*') < elements.indexOf('/')) {
          multiply(elements.indexOf('*'));
          return calc(elements.join(' '));
        }
      }
      if (elements.indexOf('*') !== -1) {
        multiply(elements.indexOf('*'));
        return calc(elements.join(' '));
      }
      if (elements.indexOf('/') !== -1) {
        divided(elements.indexOf('/'));
        return calc(elements.join(' '));
      }
      // ? –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ç–Ω–∏–º–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–µ–ª–µ–Ω–∏—è –∏ —É–º–Ω–æ–∂–µ–Ω–∏—è
      if (elements.indexOf('+') !== -1 && elements.indexOf('-') !== -1) {
        // ? –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–º–æ—Ç—Ä–∏–º –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
        if (elements.indexOf('-') < elements.indexOf('+')) {
          minus(elements.indexOf('-'));
          return calc(elements.join(' '));
        }
        if (elements.indexOf('+') < elements.indexOf('-')) {
          plus(elements.indexOf('+'));
          return calc(elements.join(' '));
        }
      }
      if (elements.indexOf('-') !== -1) {
        minus(elements.indexOf('-'));
        return calc(elements.join(' '));
      }
      if (elements.indexOf('+') !== -1) {
        plus(elements.indexOf('+'));
        return calc(elements.join(' '));
      }
      if (elements.length === 1) {
        return Number(elements[0]);
      }
    };
    const result = () => calc(value);
    // ? –µ—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º - –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –≤ –º–∞—Å—Å–∏–≤–µ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    if (!operator) {
      // ? –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏ NaN - –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤—ã–≤–æ–¥–∏–º
      if (isNaN(result())) {
        return;
      }
      setResult(result);
      return;
    }
    return;
  }, [value, operator]);

  const onClick = valueBtn => {
    const indexLastNum = value.toString().split(' ').length - 1;
    const lastNum = value.toString().split(' ')[indexLastNum];
    // ? –ø—Ä–∏—Å—ã–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if (
      valueBtn === '1' ||
      valueBtn === '2' ||
      valueBtn === '3' ||
      valueBtn === '4' ||
      valueBtn === '5' ||
      valueBtn === '6' ||
      valueBtn === '7' ||
      valueBtn === '8' ||
      valueBtn === '9' ||
      valueBtn === '0'
    ) {
      // *–µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 0 –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º, –∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
      lastNum === 0 || lastNum === '0'
        ? setValue(valueBtn)
        : setValue(value + valueBtn.toString());
      setOperator(false);
      return;
    }
    // ? –ø—Ä–∏—Å—ã–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if (valueBtn === ' + ' && operator === false) {
      setOperator(true);
      setValue(value + valueBtn);
      return;
    }
    if (valueBtn === ' - ' && operator === false) {
      setOperator(true);
      setValue(value + valueBtn);
      return;
    }
    if (valueBtn === ' * ' && operator === false) {
      setOperator(true);
      setValue(value + valueBtn);
      return;
    }
    if (valueBtn === ' / ' && operator === false) {
      setOperator(true);
      setValue(value + valueBtn);
      return;
    }
    // ? —Å–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π
    if (valueBtn === 'AC') {
      setValue(0);
      setResult(0);
      setOperator(false);
      return;
    }
    if (valueBtn === '=') {
      setValue(result);
      setOperator(false);
      return;
    }
    // TODO —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    if (valueBtn === 'delete') {
      setOperator(false);
      if (value.length <= 1 || typeof value === 'number') {
        setValue(0);
        return;
      }
      const elements = value.split(' ');
      const lengthEl = elements.length;
      elements.length = lengthEl - 1;
      const valueWithoutLastEl = elements.join(' ');
      setValue(valueWithoutLastEl);
      return;
    }
    // TODO –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–± —É–¥–∞–ª–µ–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ —Å –ø–∞–º—è—Ç–∏
    if (valueBtn === 'M+') {
      setMemory(result);
      return;
    }
    if (valueBtn === 'M-') {
      setMemory(0);
      return;
    }
    if (valueBtn === 'MR') {
      setOperator(false);
      if (value === 0) {
        setValue(memory);
        return;
      }
      setValue(value + memory);
      return;
    }
    // TODO –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏
    if (valueBtn === '.') {
      if (lastNum.includes('.')) {
        return;
      } // * –µ—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —á–∏—Å–ª–µ —É–∂–µ –µ—Å—Ç—å —Ç–æ—á–∫–∞ - –≤—Ç–æ—Ä—É—é –Ω–µ —Å—Ç–∞–≤–∏–º
      setValue(value + valueBtn.toString());
      return;
    }
    console.log('–Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä');
    return;
  };

  const changeValue = e => {
    setValue(e.currentTarget.value);
  };
  return (
    <div className={style.container}>
      <Display value={value} result={result} onChangeValue={changeValue} />
      <Panel onClick={onClick} />
    </div>
  );
}

export default App;
